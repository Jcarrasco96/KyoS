// <auto-generated />
using System;
using KyoS.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KyoS.Web.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210619222440_ModifyDocumentEntity")]
    partial class ModifyDocumentEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("KyoS.Web.Data.Entities.ActivityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfApprove")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FacilitatorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("int");

                    b.Property<int?>("ThemeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilitatorId");

                    b.HasIndex("SupervisorId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ClassificationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Classifications");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ClientEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AlternativeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmergencyContactId")
                        .HasColumnType("int");

                    b.Property<int>("Ethnicity")
                        .HasColumnType("int");

                    b.Property<string>("FullAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LegalGuardianId")
                        .HasColumnType("int");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("MedicaidID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OtherLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PreferredLanguage")
                        .HasColumnType("int");

                    b.Property<int?>("PsychiatristId")
                        .HasColumnType("int");

                    b.Property<int>("Race")
                        .HasColumnType("int");

                    b.Property<int?>("ReferredId")
                        .HasColumnType("int");

                    b.Property<int>("RelationShipOfLegalGuardian")
                        .HasColumnType("int");

                    b.Property<string>("SSN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephoneSecondary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("EmergencyContactId");

                    b.HasIndex("GroupId");

                    b.HasIndex("LegalGuardianId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PsychiatristId");

                    b.HasIndex("ReferredId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.Client_Diagnostic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("DiagnosticId")
                        .HasColumnType("int");

                    b.Property<bool>("Principal")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DiagnosticId");

                    b.ToTable("Clients_Diagnostics");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ClinicEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("LogoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Schema")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.DailySessionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("DailySessions");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.DiagnosticEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Diagnostics");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.DiagnosticTempEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Principal")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("DiagnosticsTemp");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.DoctorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.DocumentDiagnosticEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DiagnosticId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosticId");

                    b.ToTable("DocumentDiagnostics");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.DocumentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.DocumentTempEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DocumentsTemp");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.EmergencyContactEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephoneSecondary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmergencyContacts");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.FacilitatorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SignaturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Facilitators");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.GeneratedNoteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Adequate")
                        .HasColumnType("bit");

                    b.Property<bool>("AdequateAC")
                        .HasColumnType("bit");

                    b.Property<bool>("Anxious")
                        .HasColumnType("bit");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<bool>("Congruent")
                        .HasColumnType("bit");

                    b.Property<int?>("DailySessionId")
                        .HasColumnType("int");

                    b.Property<bool>("Depressed")
                        .HasColumnType("bit");

                    b.Property<bool>("Dramatized")
                        .HasColumnType("bit");

                    b.Property<bool>("Euphoric")
                        .HasColumnType("bit");

                    b.Property<bool>("Euthymic")
                        .HasColumnType("bit");

                    b.Property<bool>("Fair")
                        .HasColumnType("bit");

                    b.Property<bool>("Faulty")
                        .HasColumnType("bit");

                    b.Property<bool>("Guarded")
                        .HasColumnType("bit");

                    b.Property<bool>("Hostile")
                        .HasColumnType("bit");

                    b.Property<bool>("Impaired")
                        .HasColumnType("bit");

                    b.Property<bool>("Inadequate")
                        .HasColumnType("bit");

                    b.Property<bool>("Irritable")
                        .HasColumnType("bit");

                    b.Property<bool>("Limited")
                        .HasColumnType("bit");

                    b.Property<bool>("MildlyImpaired")
                        .HasColumnType("bit");

                    b.Property<bool>("Motivated")
                        .HasColumnType("bit");

                    b.Property<bool>("Negativistic")
                        .HasColumnType("bit");

                    b.Property<bool>("Normal")
                        .HasColumnType("bit");

                    b.Property<bool>("NotPerson")
                        .HasColumnType("bit");

                    b.Property<bool>("NotPlace")
                        .HasColumnType("bit");

                    b.Property<bool>("NotTime")
                        .HasColumnType("bit");

                    b.Property<bool>("Optimistic")
                        .HasColumnType("bit");

                    b.Property<bool>("OrientedX3")
                        .HasColumnType("bit");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.Property<bool>("Present")
                        .HasColumnType("bit");

                    b.Property<bool>("SeverelyImpaired")
                        .HasColumnType("bit");

                    b.Property<bool>("ShortSpanned")
                        .HasColumnType("bit");

                    b.Property<bool>("Unmotivated")
                        .HasColumnType("bit");

                    b.Property<bool>("Withdrawn")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DailySessionId");

                    b.HasIndex("PlanId");

                    b.ToTable("GeneratedNotes");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.GeneratedNote_NotePrototype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("GeneratedNoteId")
                        .HasColumnType("int");

                    b.Property<string>("LinkedGoal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedObj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotePrototypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GeneratedNoteId");

                    b.HasIndex("NotePrototypeId");

                    b.ToTable("GeneratedNotes_NotesPrototypes");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.GoalEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AreaOfFocus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MTPId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MTPId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.GroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Am")
                        .HasColumnType("bit");

                    b.Property<int?>("FacilitatorId")
                        .HasColumnType("int");

                    b.Property<bool>("Pm")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FacilitatorId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.LegalGuardianEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephoneSecondary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LegalGuardians");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.MTPEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("AdmisionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Frecuency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InitialDischargeCriteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LevelCare")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MTPDevelopedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Modality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfMonths")
                        .HasColumnType("int");

                    b.Property<string>("Setting")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("MTPs");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.MessageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("datetime2");

                    b.Property<string>("From")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("To")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Workday_ClientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Workday_ClientId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.NoteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Adequate")
                        .HasColumnType("bit");

                    b.Property<bool>("AdequateAC")
                        .HasColumnType("bit");

                    b.Property<bool>("Anxious")
                        .HasColumnType("bit");

                    b.Property<bool>("Congruent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateOfApprove")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Decompensating")
                        .HasColumnType("bit");

                    b.Property<bool>("Depressed")
                        .HasColumnType("bit");

                    b.Property<bool>("Dramatized")
                        .HasColumnType("bit");

                    b.Property<bool>("Euphoric")
                        .HasColumnType("bit");

                    b.Property<bool>("Euthymic")
                        .HasColumnType("bit");

                    b.Property<bool>("Fair")
                        .HasColumnType("bit");

                    b.Property<bool>("Faulty")
                        .HasColumnType("bit");

                    b.Property<bool>("Guarded")
                        .HasColumnType("bit");

                    b.Property<bool>("Hostile")
                        .HasColumnType("bit");

                    b.Property<bool>("Impaired")
                        .HasColumnType("bit");

                    b.Property<bool>("Inadequate")
                        .HasColumnType("bit");

                    b.Property<bool>("Irritable")
                        .HasColumnType("bit");

                    b.Property<bool>("Limited")
                        .HasColumnType("bit");

                    b.Property<int?>("MTPId")
                        .HasColumnType("int");

                    b.Property<bool>("MildlyImpaired")
                        .HasColumnType("bit");

                    b.Property<bool>("MinimalProgress")
                        .HasColumnType("bit");

                    b.Property<bool>("ModerateProgress")
                        .HasColumnType("bit");

                    b.Property<bool>("Motivated")
                        .HasColumnType("bit");

                    b.Property<bool>("Negativistic")
                        .HasColumnType("bit");

                    b.Property<bool>("NoProgress")
                        .HasColumnType("bit");

                    b.Property<bool>("Normal")
                        .HasColumnType("bit");

                    b.Property<bool>("NotPerson")
                        .HasColumnType("bit");

                    b.Property<bool>("NotPlace")
                        .HasColumnType("bit");

                    b.Property<bool>("NotTime")
                        .HasColumnType("bit");

                    b.Property<bool>("Optimistic")
                        .HasColumnType("bit");

                    b.Property<bool>("OrientedX3")
                        .HasColumnType("bit");

                    b.Property<string>("PlanNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Present")
                        .HasColumnType("bit");

                    b.Property<bool>("Regression")
                        .HasColumnType("bit");

                    b.Property<string>("Setting")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SeverelyImpaired")
                        .HasColumnType("bit");

                    b.Property<bool>("ShortSpanned")
                        .HasColumnType("bit");

                    b.Property<bool>("SignificantProgress")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("int");

                    b.Property<bool>("UnableToDetermine")
                        .HasColumnType("bit");

                    b.Property<bool>("Unmotivated")
                        .HasColumnType("bit");

                    b.Property<bool>("Withdrawn")
                        .HasColumnType("bit");

                    b.Property<int>("Workday_Client_FK")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupervisorId");

                    b.HasIndex("Workday_Client_FK")
                        .IsUnique();

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.NotePrototypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("AnswerClient")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("AnswerFacilitator")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("NotesPrototypes");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.NotePrototype_Classification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<int?>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("NoteId");

                    b.ToTable("NotesPrototypes_Classifications");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.Note_Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("AnswerClient")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("AnswerFacilitator")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("NoteId")
                        .HasColumnType("int");

                    b.Property<int?>("ObjetiveId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("NoteId");

                    b.HasIndex("ObjetiveId");

                    b.ToTable("Notes_Activities");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ObjetiveEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateOpened")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateResolved")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTarget")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GoalId")
                        .HasColumnType("int");

                    b.Property<string>("Intervention")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Objetive")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.ToTable("Objetives");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.Objetive_Classification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<int?>("ObjetiveId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("ObjetiveId");

                    b.ToTable("Objetives_Classifications");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.PlanEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.Plan_Classification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("PlanId");

                    b.ToTable("Plans_Classifications");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.PsychiatristEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Psychiatrists");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ReferredEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ReferredNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Referreds");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.SupervisorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SignaturePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Supervisors");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ThemeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.WeekEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FinalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InitDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WeekOfYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("Weeks");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.WorkdayEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WeekId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeekId");

                    b.ToTable("Workdays");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.Workday_Activity_Facilitator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int?>("FacilitatorId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkdayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("FacilitatorId");

                    b.HasIndex("WorkdayId");

                    b.ToTable("Workdays_Activities_Facilitators");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.Workday_Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CauseOfNotPresent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("FacilitatorId")
                        .HasColumnType("int");

                    b.Property<bool>("Present")
                        .HasColumnType("bit");

                    b.Property<string>("Session")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WorkdayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FacilitatorId");

                    b.HasIndex("WorkdayId");

                    b.ToTable("Workdays_Clients");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ActivityEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.FacilitatorEntity", "Facilitator")
                        .WithMany()
                        .HasForeignKey("FacilitatorId");

                    b.HasOne("KyoS.Web.Data.Entities.SupervisorEntity", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId");

                    b.HasOne("KyoS.Web.Data.Entities.ThemeEntity", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");

                    b.Navigation("Facilitator");

                    b.Navigation("Supervisor");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ClientEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ClinicEntity", "Clinic")
                        .WithMany("Clients")
                        .HasForeignKey("ClinicId");

                    b.HasOne("KyoS.Web.Data.Entities.DoctorEntity", "Doctor")
                        .WithMany("Clients")
                        .HasForeignKey("DoctorId");

                    b.HasOne("KyoS.Web.Data.Entities.EmergencyContactEntity", "EmergencyContact")
                        .WithMany("Clients")
                        .HasForeignKey("EmergencyContactId");

                    b.HasOne("KyoS.Web.Data.Entities.GroupEntity", "Group")
                        .WithMany("Clients")
                        .HasForeignKey("GroupId");

                    b.HasOne("KyoS.Web.Data.Entities.LegalGuardianEntity", "LegalGuardian")
                        .WithMany("Clients")
                        .HasForeignKey("LegalGuardianId");

                    b.HasOne("KyoS.Web.Data.Entities.PsychiatristEntity", "Psychiatrist")
                        .WithMany("Clients")
                        .HasForeignKey("PsychiatristId");

                    b.HasOne("KyoS.Web.Data.Entities.ReferredEntity", "Referred")
                        .WithMany("Clients")
                        .HasForeignKey("ReferredId");

                    b.Navigation("Clinic");

                    b.Navigation("Doctor");

                    b.Navigation("EmergencyContact");

                    b.Navigation("Group");

                    b.Navigation("LegalGuardian");

                    b.Navigation("Psychiatrist");

                    b.Navigation("Referred");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.Client_Diagnostic", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ClientEntity", "Client")
                        .WithMany("Clients_Diagnostics")
                        .HasForeignKey("ClientId");

                    b.HasOne("KyoS.Web.Data.Entities.DiagnosticEntity", "Diagnostic")
                        .WithMany()
                        .HasForeignKey("DiagnosticId");

                    b.Navigation("Client");

                    b.Navigation("Diagnostic");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.DailySessionEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.GroupEntity", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.DocumentDiagnosticEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.DiagnosticEntity", "Diagnostic")
                        .WithMany()
                        .HasForeignKey("DiagnosticId");

                    b.Navigation("Diagnostic");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.DocumentEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ClientEntity", "Client")
                        .WithMany("Documents")
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.FacilitatorEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ClinicEntity", "Clinic")
                        .WithMany("Facilitators")
                        .HasForeignKey("ClinicId");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.GeneratedNoteEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ClientEntity", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("KyoS.Web.Data.Entities.DailySessionEntity", "DailySession")
                        .WithMany()
                        .HasForeignKey("DailySessionId");

                    b.HasOne("KyoS.Web.Data.Entities.PlanEntity", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId");

                    b.Navigation("Client");

                    b.Navigation("DailySession");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.GeneratedNote_NotePrototype", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.GeneratedNoteEntity", "GeneratedNote")
                        .WithMany()
                        .HasForeignKey("GeneratedNoteId");

                    b.HasOne("KyoS.Web.Data.Entities.NotePrototypeEntity", "NotePrototype")
                        .WithMany()
                        .HasForeignKey("NotePrototypeId");

                    b.Navigation("GeneratedNote");

                    b.Navigation("NotePrototype");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.GoalEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.MTPEntity", "MTP")
                        .WithMany("Goals")
                        .HasForeignKey("MTPId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("MTP");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.GroupEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.FacilitatorEntity", "Facilitator")
                        .WithMany("Groups")
                        .HasForeignKey("FacilitatorId");

                    b.Navigation("Facilitator");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.MTPEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ClientEntity", "Client")
                        .WithMany("MTPs")
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.MessageEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.Workday_Client", "Workday_Client")
                        .WithMany("Messages")
                        .HasForeignKey("Workday_ClientId");

                    b.Navigation("Workday_Client");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.NoteEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.SupervisorEntity", "Supervisor")
                        .WithMany("Notes")
                        .HasForeignKey("SupervisorId");

                    b.HasOne("KyoS.Web.Data.Entities.Workday_Client", "Workday_Cient")
                        .WithOne("Note")
                        .HasForeignKey("KyoS.Web.Data.Entities.NoteEntity", "Workday_Client_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supervisor");

                    b.Navigation("Workday_Cient");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.NotePrototypeEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ActivityEntity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.NotePrototype_Classification", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ClassificationEntity", "Classification")
                        .WithMany("NotesClassification")
                        .HasForeignKey("ClassificationId");

                    b.HasOne("KyoS.Web.Data.Entities.NotePrototypeEntity", "Note")
                        .WithMany("Classifications")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Classification");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.Note_Activity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ActivityEntity", "Activity")
                        .WithMany("Notes_Activities")
                        .HasForeignKey("ActivityId");

                    b.HasOne("KyoS.Web.Data.Entities.NoteEntity", "Note")
                        .WithMany("Notes_Activities")
                        .HasForeignKey("NoteId");

                    b.HasOne("KyoS.Web.Data.Entities.ObjetiveEntity", "Objetive")
                        .WithMany()
                        .HasForeignKey("ObjetiveId");

                    b.Navigation("Activity");

                    b.Navigation("Note");

                    b.Navigation("Objetive");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ObjetiveEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.GoalEntity", "Goal")
                        .WithMany("Objetives")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.Objetive_Classification", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ClassificationEntity", "Classification")
                        .WithMany("ObjetivesClassification")
                        .HasForeignKey("ClassificationId");

                    b.HasOne("KyoS.Web.Data.Entities.ObjetiveEntity", "Objetive")
                        .WithMany("Classifications")
                        .HasForeignKey("ObjetiveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Classification");

                    b.Navigation("Objetive");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.Plan_Classification", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ClassificationEntity", "Classification")
                        .WithMany("PlansClassification")
                        .HasForeignKey("ClassificationId");

                    b.HasOne("KyoS.Web.Data.Entities.PlanEntity", "Plan")
                        .WithMany("Classifications")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Classification");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.SupervisorEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ClinicEntity", "Clinic")
                        .WithMany("Supervisors")
                        .HasForeignKey("ClinicId");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ThemeEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ClinicEntity", "Clinic")
                        .WithMany("Themes")
                        .HasForeignKey("ClinicId");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.UserEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ClinicEntity", "Clinic")
                        .WithMany("Users")
                        .HasForeignKey("ClinicId");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.WeekEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ClinicEntity", "Clinic")
                        .WithMany("Weeks")
                        .HasForeignKey("ClinicId");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.WorkdayEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.WeekEntity", "Week")
                        .WithMany("Days")
                        .HasForeignKey("WeekId");

                    b.Navigation("Week");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.Workday_Activity_Facilitator", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ActivityEntity", "Activity")
                        .WithMany("Workdays_Activities_Facilitators")
                        .HasForeignKey("ActivityId");

                    b.HasOne("KyoS.Web.Data.Entities.FacilitatorEntity", "Facilitator")
                        .WithMany("Workdays_Activities_Facilitators")
                        .HasForeignKey("FacilitatorId");

                    b.HasOne("KyoS.Web.Data.Entities.WorkdayEntity", "Workday")
                        .WithMany("Workdays_Activities_Facilitators")
                        .HasForeignKey("WorkdayId");

                    b.Navigation("Activity");

                    b.Navigation("Facilitator");

                    b.Navigation("Workday");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.Workday_Client", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ClientEntity", "Client")
                        .WithMany("Workdays_Clients")
                        .HasForeignKey("ClientId");

                    b.HasOne("KyoS.Web.Data.Entities.FacilitatorEntity", "Facilitator")
                        .WithMany("Workdays_Clients")
                        .HasForeignKey("FacilitatorId");

                    b.HasOne("KyoS.Web.Data.Entities.WorkdayEntity", "Workday")
                        .WithMany("Workdays_Clients")
                        .HasForeignKey("WorkdayId");

                    b.Navigation("Client");

                    b.Navigation("Facilitator");

                    b.Navigation("Workday");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KyoS.Web.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ActivityEntity", b =>
                {
                    b.Navigation("Notes_Activities");

                    b.Navigation("Workdays_Activities_Facilitators");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ClassificationEntity", b =>
                {
                    b.Navigation("NotesClassification");

                    b.Navigation("ObjetivesClassification");

                    b.Navigation("PlansClassification");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ClientEntity", b =>
                {
                    b.Navigation("Clients_Diagnostics");

                    b.Navigation("Documents");

                    b.Navigation("MTPs");

                    b.Navigation("Workdays_Clients");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ClinicEntity", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Facilitators");

                    b.Navigation("Supervisors");

                    b.Navigation("Themes");

                    b.Navigation("Users");

                    b.Navigation("Weeks");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.DoctorEntity", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.EmergencyContactEntity", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.FacilitatorEntity", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Workdays_Activities_Facilitators");

                    b.Navigation("Workdays_Clients");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.GoalEntity", b =>
                {
                    b.Navigation("Objetives");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.GroupEntity", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.LegalGuardianEntity", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.MTPEntity", b =>
                {
                    b.Navigation("Goals");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.NoteEntity", b =>
                {
                    b.Navigation("Notes_Activities");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.NotePrototypeEntity", b =>
                {
                    b.Navigation("Classifications");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ObjetiveEntity", b =>
                {
                    b.Navigation("Classifications");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.PlanEntity", b =>
                {
                    b.Navigation("Classifications");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.PsychiatristEntity", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ReferredEntity", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.SupervisorEntity", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.WeekEntity", b =>
                {
                    b.Navigation("Days");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.WorkdayEntity", b =>
                {
                    b.Navigation("Workdays_Activities_Facilitators");

                    b.Navigation("Workdays_Clients");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.Workday_Client", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Note");
                });
#pragma warning restore 612, 618
        }
    }
}
