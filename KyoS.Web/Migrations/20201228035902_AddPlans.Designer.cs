// <auto-generated />
using System;
using KyoS.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KyoS.Web.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201228035902_AddPlans")]
    partial class AddPlans
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("KyoS.Web.Data.Entities.ActivityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ThemeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThemeId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ClassificationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Classifications");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ClientEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("MedicalID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("GroupId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ClinicEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("LogoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.Clinic_Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ThemeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Clinics_Themes");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.DailySessionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("DailySessions");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.DiagnosisEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MTPId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MTPId");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.DiagnosisTempEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DiagnosesTemp");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.FacilitatorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Facilitators");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.GoalEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AreaOfFocus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MTPId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MTPId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.GroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Am")
                        .HasColumnType("bit");

                    b.Property<int?>("FacilitatorId")
                        .HasColumnType("int");

                    b.Property<bool>("Pm")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FacilitatorId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.MTPEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("AdmisionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Frecuency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InitialDischargeCriteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LevelCare")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MTPDevelopedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Modality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfMonths")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("MTPs");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.NoteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("AnswerClient")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("AnswerFacilitator")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.Note_Classification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<int?>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("NoteId");

                    b.ToTable("Notes_Classifications");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.Note_DailySession_Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("DailySessionId")
                        .HasColumnType("int");

                    b.Property<int?>("NoteId")
                        .HasColumnType("int");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DailySessionId");

                    b.HasIndex("NoteId");

                    b.HasIndex("PlanId");

                    b.ToTable("Notes_DailySessions_Clients");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ObjetiveEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateOpened")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateResolved")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTarget")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GoalId")
                        .HasColumnType("int");

                    b.Property<string>("Intervention")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Objetive")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.ToTable("Objetives");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.Objetive_Classification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<int?>("ObjetiveId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("ObjetiveId");

                    b.ToTable("Objetives_Classifications");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.PlanEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.Plan_Classification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("PlanId");

                    b.ToTable("Plans_Classifications");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.SupervisorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Supervisors");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ThemeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ActivityEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ThemeEntity", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ClientEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ClinicEntity", "Clinic")
                        .WithMany("Clients")
                        .HasForeignKey("ClinicId");

                    b.HasOne("KyoS.Web.Data.Entities.GroupEntity", "Group")
                        .WithMany("Clients")
                        .HasForeignKey("GroupId");

                    b.Navigation("Clinic");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.Clinic_Theme", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ClinicEntity", "Clinic")
                        .WithMany("Clinics_Themes")
                        .HasForeignKey("ClinicId");

                    b.HasOne("KyoS.Web.Data.Entities.ThemeEntity", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");

                    b.Navigation("Clinic");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.DailySessionEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.GroupEntity", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.DiagnosisEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.MTPEntity", "MTP")
                        .WithMany("Diagnosis")
                        .HasForeignKey("MTPId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("MTP");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.FacilitatorEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ClinicEntity", "Clinic")
                        .WithMany("Facilitators")
                        .HasForeignKey("ClinicId");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.GoalEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.MTPEntity", "MTP")
                        .WithMany("Goals")
                        .HasForeignKey("MTPId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("MTP");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.GroupEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.FacilitatorEntity", "Facilitator")
                        .WithMany("Groups")
                        .HasForeignKey("FacilitatorId");

                    b.Navigation("Facilitator");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.MTPEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ClientEntity", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.NoteEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ActivityEntity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.Note_Classification", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ClassificationEntity", "Classification")
                        .WithMany("NotesClassification")
                        .HasForeignKey("ClassificationId");

                    b.HasOne("KyoS.Web.Data.Entities.NoteEntity", "Note")
                        .WithMany("Classifications")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Classification");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.Note_DailySession_Client", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ClientEntity", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("KyoS.Web.Data.Entities.DailySessionEntity", "DailySession")
                        .WithMany()
                        .HasForeignKey("DailySessionId");

                    b.HasOne("KyoS.Web.Data.Entities.NoteEntity", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId");

                    b.HasOne("KyoS.Web.Data.Entities.PlanEntity", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId");

                    b.Navigation("Client");

                    b.Navigation("DailySession");

                    b.Navigation("Note");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ObjetiveEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.GoalEntity", "Goal")
                        .WithMany("Objetives")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.Objetive_Classification", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ClassificationEntity", "Classification")
                        .WithMany("ObjetivesClassification")
                        .HasForeignKey("ClassificationId");

                    b.HasOne("KyoS.Web.Data.Entities.ObjetiveEntity", "Objetive")
                        .WithMany("Classifications")
                        .HasForeignKey("ObjetiveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Classification");

                    b.Navigation("Objetive");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.Plan_Classification", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ClassificationEntity", "Classification")
                        .WithMany("PlanClassification")
                        .HasForeignKey("ClassificationId");

                    b.HasOne("KyoS.Web.Data.Entities.PlanEntity", "Plan")
                        .WithMany("Classifications")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Classification");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.SupervisorEntity", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.ClinicEntity", "Clinic")
                        .WithMany("Supervisors")
                        .HasForeignKey("ClinicId");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KyoS.Web.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KyoS.Web.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ClassificationEntity", b =>
                {
                    b.Navigation("NotesClassification");

                    b.Navigation("ObjetivesClassification");

                    b.Navigation("PlanClassification");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ClinicEntity", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Clinics_Themes");

                    b.Navigation("Facilitators");

                    b.Navigation("Supervisors");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.FacilitatorEntity", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.GoalEntity", b =>
                {
                    b.Navigation("Objetives");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.GroupEntity", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.MTPEntity", b =>
                {
                    b.Navigation("Diagnosis");

                    b.Navigation("Goals");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.NoteEntity", b =>
                {
                    b.Navigation("Classifications");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.ObjetiveEntity", b =>
                {
                    b.Navigation("Classifications");
                });

            modelBuilder.Entity("KyoS.Web.Data.Entities.PlanEntity", b =>
                {
                    b.Navigation("Classifications");
                });
#pragma warning restore 612, 618
        }
    }
}
