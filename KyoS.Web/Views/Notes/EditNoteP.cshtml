@model KyoS.Web.Models.NotePViewModel
@{
    ViewData["Title"] = "PSR note management";
}

<div class="breadcrumbs" id="breadcrumbs">
    <ul class="breadcrumb">
        <li>
            <i class="icon-home"></i>
            @if (Model.Origin == 0)
            {
                @Html.ActionLink("PSR Notes", "Index", "Notes")
            }
            @if (Model.Origin == 1)
            {
                @Html.ActionLink("Not Started Notes", "NotStartedNotes", "Notes")
            }
            @if (Model.Origin == 2)
            {
                @Html.ActionLink("Notes in Edition", "NotesInEdit", "Notes")
            }
            @if (Model.Origin == 3)
            {
                @Html.ActionLink("Pending Notes", "PendingNotes", "Notes")
            }
            @if (Model.Origin == 4)
            {
                @Html.ActionLink("Notes with review", "NotesWithReview", "Notes")
            }
        </li>
        <li class="active">PSR Note</li>
    </ul>
</div>

<h4>PSR Note Management</h4>

<div class="row">
    <div>
        <div class="col-md-12">
            @if (ViewBag.Error == "0")
            {
                <div class="alert alert-block alert-danger">
                    <button type="button" class="close" data-dismiss="alert">
                        <i class="icon-remove"></i>
                    </button>
                    <i class="icon-ok red"></i>
                    <strong class="red">
                        Error. The note must have at least one related goal.
                    </strong>
                </div>
            }
            @if (ViewBag.Error == "1")
            {
                <div class="alert alert-block alert-danger">
                    <i class="icon-ok red"></i>
                    <strong class="red">
                        Error. There are no activities for this date. Please must create them.
                    </strong>
                    <a asp-action="CreateActivitiesWeek" asp-controller="Activities" asp-route-session="@ViewData["session"].ToString()" asp-route-id="@Model.Id">Activities per day</a>
                </div>
            }
            @if (ViewBag.Error == "2")
            {
                <div class="alert alert-block alert-danger">
                    <button type="button" class="close" data-dismiss="alert">
                        <i class="icon-remove"></i>
                    </button>
                    <i class="icon-ok red"></i>
                    <strong class="red">
                        Error. The note has fields mandatory.
                    </strong>
                </div>
            }
            @if (ViewBag.Error == "3")
            {
                <div class="alert alert-block alert-danger">
                    <button type="button" class="close" data-dismiss="alert">
                        <i class="icon-remove"></i>
                    </button>
                    <i class="icon-ok red"></i>
                    <strong class="red">
                        Error. The client have not active MTP.
                    </strong>
                </div>
            }
            @if (ViewBag.Error == "4")
            {
                <div class="alert alert-block alert-danger">
                    <button type="button" class="close" data-dismiss="alert">
                        <i class="icon-remove"></i>
                    </button>
                    <i class="icon-ok red"></i>
                    <strong class="red">
                        Error. There are gender issues in: @ViewBag.errorText
                    </strong>
                </div>
            }
            @if (ViewBag.Error == "5")
            {
                <div class="alert alert-block alert-danger">
                    <button type="button" class="close" data-dismiss="alert">
                        <i class="icon-remove"></i>
                    </button>
                    <i class="icon-ok red"></i>
                    <strong class="red">
                        Error. The selected client has a created note from another service at that time.
                    </strong>
                </div>
            }
            @if (ViewBag.Error == "6")
            {
                <div class="alert alert-block alert-danger">
                    <button type="button" class="close" data-dismiss="alert">
                        <i class="icon-remove"></i>
                    </button>
                    <i class="icon-ok red"></i>
                    <strong class="red">
                        Error. You must select at least one client's response per theme.
                    </strong>
                </div>
            }
        </div>
        @if ((ViewBag.Error != "1") && (ViewBag.Error != "3"))  //se puede crear o editar la nota
        {
            <form asp-action="EditNoteP" enctype="multipart/form-data" onsubmit="return false;" id="form1">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" asp-for="Id" />
                <input type="hidden" asp-for="IdActivity1" />
                <input type="hidden" asp-for="IdActivity2" />
                <input type="hidden" asp-for="IdActivity3" />
                <input type="hidden" asp-for="IdActivity4" />
                <input type="hidden" asp-for="Origin" />
                <input type="hidden" asp-for="Schema" />
                <partial name="_MCSP" />
                <partial name="_NotesP" />
                <div class="form-group col-md-12">
                    <input onclick="Verifications()" type="submit" value="Save All" class="btn btn-primary" />
                    @if (Model.Origin == 0) //viene de la pagina Index de las notas
                    {
                        <a asp-action="Index" class="btn btn-success">Back</a>
                    }
                    @if (Model.Origin == 1) //viene de la pagina NotStartedNotes de las notas
                    {
                        <a asp-action="NotStartedNotes" class="btn btn-success">Back</a>
                    }
                    @if (Model.Origin == 2) //viene de la pagina NotesInEdit de las notas
                    {
                        <a asp-action="NotesInEdit" class="btn btn-success">Back</a>
                    }
                    @if (Model.Origin == 3) //viene de la pagina PendingNotes de las notas
                    {
                        <a asp-action="PendingNotes" class="btn btn-success">Back</a>
                    }
                    @if (Model.Origin == 4) //viene de la pagina NotesWithReview de las notas
                    {
                        <a asp-action="NotesWithReview" class="btn btn-success">Back</a>
                    }
                    @if (Model.Origin == 5) //viene de la pagina MessagesOfNotes
                    {
                        <a asp-action="MessagesOfNotes" asp-controller="Messages" class="btn btn-success">Back</a>
                    }
                    @if (Model.Status.ToString() == "Edition")
                    {
                        @if (Model.Origin == 0) //viene de la pagina Index de las notas
                        {
                            <a asp-action="FinishEditingP" class="btn btn-warning disabled" asp-route-id="@Model.Id" asp-route-origin="0" title="Finish edition of note">Finish Editing</a>
                        }
                        @if (Model.Origin == 2) //viene de la pagina NotesInEdit de las notas
                        {
                            <a asp-action="FinishEditingP" class="btn btn-warning disabled" asp-route-id="@Model.Id" asp-route-origin="2" title="Finish edition of note">Finish Editing</a>
                        }
                    }
                </div>
            </form>
        }
    </div>
</div>

<partial name="_ModalPopupLg" />

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script type="text/javascript">

            $(document).ready(function () {
                $("#cbGoal1").change(function () {
                    var url = "@Url.Action("GetObjetiveList", "Notes")";
                    $.get(url, { idGoal: $("#cbGoal1").val(), idNote: @Model.Id }, function (data) {
                        $("#cbObjetive1").empty();
                        $.each(data, function (index, row) {
                            $("#cbObjetive1").append("<option value='" + row.value + "'>" + row.text + "</option>")
                        });

                        //actualizo el label con la intervention que corresponde al obj seleccionado
                        url = "@Url.Action("GetIntervention", "Notes")";
                        $.get(url, { idObjetive: $("#cbObjetive1").val() }, function (data) {
                            $("#lbIntervention1").text(data);
                        });
                    });
                })
                $("#cbGoal2").change(function () {
                    var url = "@Url.Action("GetObjetiveList", "Notes")";
                    $.get(url, { idGoal: $("#cbGoal2").val(), idNote: @Model.Id }, function (data) {
                        $("#cbObjetive2").empty();
                        $.each(data, function (index, row) {
                            $("#cbObjetive2").append("<option value='" + row.value + "'>" + row.text + "</option>")
                        });

                        //actualizo el label con la intervention que corresponde al obj seleccionado
                        url = "@Url.Action("GetIntervention", "Notes")";
                        $.get(url, { idObjetive: $("#cbObjetive2").val() }, function (data) {
                            $("#lbIntervention2").text(data);
                        });
                    });
                })
                $("#cbGoal3").change(function () {
                    var url = "@Url.Action("GetObjetiveList", "Notes")";
                    $.get(url, { idGoal: $("#cbGoal3").val(), idNote: @Model.Id }, function (data) {
                        $("#cbObjetive3").empty();
                        $.each(data, function (index, row) {
                            $("#cbObjetive3").append("<option value='" + row.value + "'>" + row.text + "</option>")
                        });

                        //actualizo el label con la intervention que corresponde al obj seleccionado
                        url = "@Url.Action("GetIntervention", "Notes")";
                        $.get(url, { idObjetive: $("#cbObjetive3").val() }, function (data) {
                            $("#lbIntervention3").text(data);
                        });
                    });
                })
                $("#cbGoal4").change(function () {
                    var url = "@Url.Action("GetObjetiveList", "Notes")";
                    $.get(url, { idGoal: $("#cbGoal4").val(), idNote: @Model.Id }, function (data) {
                        $("#cbObjetive4").empty();
                        $.each(data, function (index, row) {
                            $("#cbObjetive4").append("<option value='" + row.value + "'>" + row.text + "</option>")
                        });

                        //actualizo el label con la intervention que corresponde al obj seleccionado
                        url = "@Url.Action("GetIntervention", "Notes")";
                        $.get(url, { idObjetive: $("#cbObjetive4").val() }, function (data) {
                            $("#lbIntervention4").text(data);
                        });
                    });
                })
                $("#cbObjetive1").change(function () {
                    var url = "@Url.Action("GetIntervention", "Notes")";
                    $.get(url, { idObjetive: $("#cbObjetive1").val() }, function (data) {
                        $("#lbIntervention1").text(data);
                    });
                })
                $("#cbObjetive2").change(function () {
                    var url = "@Url.Action("GetIntervention", "Notes")";
                    $.get(url, { idObjetive: $("#cbObjetive2").val() }, function (data) {
                        $("#lbIntervention2").text(data);
                    });
                })
                $("#cbObjetive3").change(function () {
                    var url = "@Url.Action("GetIntervention", "Notes")";
                    $.get(url, { idObjetive: $("#cbObjetive3").val() }, function (data) {
                        $("#lbIntervention3").text(data);
                    });
                })
                $("#cbObjetive4").change(function () {
                    var url = "@Url.Action("GetIntervention", "Notes")";
                    $.get(url, { idObjetive: $("#cbObjetive4").val() }, function (data) {
                        $("#lbIntervention4").text(data);
                    });
                })

                $("#EnglishPlanNote").click(function () {
                    var url = "@Url.Action("Translate", "Notes")";
                    $.get(url, { text: $("#PlanNote").val() }, function (data) {
                        $("#PlanNote").val(data);
                    });
                })
            });
        function getMinute() {
            var url = "@Url.Action("GetUnitsPSR", "Notes")";
            $.get(url, { minute1: $("#minute1").val(), minute2: $("#minute2").val(), minute3: $("#minute3").val(), minute4: $("#minute4").val() }, function (data) { $("#lbUnits").text(data); });
            var url = "@Url.Action("GetMinutesPSR", "Notes")";
            $.get(url, { minute1: $("#minute1").val(), minute2: $("#minute2").val(), minute3: $("#minute3").val(), minute4: $("#minute4").val() }, function (data) { $("#lbTotalMinutes").text(data); });
        }
            function Verifications() {
            
                if ($("#PlanNote").val() != "")
                {
                    //user must select at least one client's response per theme
                    if (ClientResponseVerification()) {                        
                        Swal.fire({
                            title: 'Error',
                            text: "You must select at least one client's response per theme.",
                            icon: 'error',
                            showConfirmButton: false,
                            showCancelButton: true,                            
                            cancelButtonText: '   OK   '
                        });
                        return;
                    }

                    //gender verification
                    var url = "@Url.Action("GetGenderByClient", "MTPs")";   
                
                    $.get(url, { idClient: @Model.Workday_Cient.Client.Id }, function (data) {
                        
                        let plan = $("#PlanNote").val();
                        let text = "";
                        
                        if (data == 'F') //Female
                        {
                            if (MaleVerification(plan) == true) {
                                text = ", Client benefited from...";
                            }
                        
                            if (text != "") {
                                Swal.fire({
                                    title: 'Do you want to continue?',
                                    text: "There are gender issues in" + text,
                                    icon: 'warning',
                                    showCancelButton: true,
                                    confirmButtonColor: '#ec971f',
                                    cancelButtonColor: '#3085d6',
                                    confirmButtonText: 'Yes, continue!'
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        form1.submit();
                                    }
                                });
                            }
                            else {
                                form1.submit();
                            }
                        }
                        else
                        {
                            if (data == 'M') //Male
                            {
                                if (FemaleVerification(plan) == true) {
                                    text = ", Client benefited from...";
                                }
                            
                                if (text != "") {
                                    Swal.fire({
                                        title: 'Do you want to continue?',
                                        text: "There are gender issues in" + text,
                                        icon: 'warning',
                                        showCancelButton: true,
                                        confirmButtonColor: '#ec971f',
                                        cancelButtonColor: '#3085d6',
                                        confirmButtonText: 'Yes, continue!'
                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            form1.submit();
                                        }
                                    });
                                }
                                else {
                                    form1.submit();
                                }
                            }
                        }
                    });
                }
            }

            function MaleVerification(text) {
                if (text.includes(" he ") || text.includes(" He ") || text.includes(" his ") || text.includes(" His ") ||
                    text.includes(" him ") || text.includes(" him.") || text.includes("himself") || text.includes("Himself") ||
                    text.includes(" oldman") || text.includes(" wife")) {
                    return true;
                }
                else {
                    return false;
                }
            }

            function FemaleVerification(text) {
                if (text.includes(" she ") || text.includes(" She ") || text.includes(" her.") || text.includes(" her ") ||
                    text.includes(" Her ") || text.includes("herself") || text.includes("Herself") || text.includes(" oldwoman") ||
                    text.includes(" husband")) {
                    return true;
                }
                else {
                    return false;
                }
            }

            function ClientResponseVerification() {

                //The user must select at least one client response per theme 
                if ((Present1.checked == true && Cooperative1.checked == false && Assertive1.checked == false && Passive1.checked == false && Variable1.checked == false && Uninterested1.checked == false && Engaged1.checked == false && Distractible1.checked == false && Confused1.checked == false && Aggresive1.checked == false && Resistant1.checked == false && Other1.checked == false)
                    || (Present2.checked == true && Cooperative2.checked == false && Assertive2.checked == false && Passive2.checked == false && Variable2.checked == false && Uninterested2.checked == false && Engaged2.checked == false && Distractible2.checked == false && Confused2.checked == false && Aggresive2.checked == false && Resistant2.checked == false && Other2.checked == false)
                    || (Present3.checked == true && Cooperative3.checked == false && Assertive3.checked == false && Passive3.checked == false && Variable3.checked == false && Uninterested3.checked == false && Engaged3.checked == false && Distractible3.checked == false && Confused3.checked == false && Aggresive3.checked == false && Resistant3.checked == false && Other3.checked == false)
                    || (Present4.checked == true && Cooperative4.checked == false && Assertive4.checked == false && Passive4.checked == false && Variable4.checked == false && Uninterested4.checked == false && Engaged4.checked == false && Distractible4.checked == false && Confused4.checked == false && Aggresive4.checked == false && Resistant4.checked == false && Other4.checked == false)) {
                    return true;
                }
                else {
                    return false;
                }
            }

    </script>
}



